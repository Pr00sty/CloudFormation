Resources:
  IamPolicyLambdaFunction:
    Type: AWS::IAM::ManagedPolicy
    Description: Policy for Lambda
    Properties:
      ManagedPolicyName: codedeploy-lambda-policy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - s3:*"
            Resource: '*'
          - Effect: Allow
            Action:
              - logs:*"
            Resource: 'arn:aws:logs:*:*:*'
          - Effect: Allow
            Action:
              - codepipeline:PutJobSuccessResult
              - codepipeline:PutJobFailureResult
            Resource: '*'
  IamRoleLambdaFunction:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - Ref: IamPolicyLambdaFunction
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      RoleName: codedeploy-lambda-role

  CodeDeployFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: codedeploy_function
      Handler: lambda_function.lambda_handler
      Role:
        Fn::GetAtt:
          - IamRoleLambdaFunction
          - Arn
      Code:
        ZipFile: |
          import os

          def lambda_handler(event, context):
            print(event)
            print(f"Running version of lambda: {os.getenv('AWS_LAMBDA_FUNCTION_VERSION')}")
      Runtime: python3.7
      MemorySize: 128
      Timeout: 2

Outputs:
  LambdaFunctionArn:
    Value:
      GetAtt CodeDeployFunction.Arn
